# -*- coding: utf-8 -*-
"""ExploitAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LODOkOMn1mUFM84V1ef95jrlxIDB593R
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plot

exploitDataFrame = pd.read_csv('/content/drive/MyDrive/IT 496/githubExploitData.csv')
exploitDataFrame.head(10)

def countPlatform(platform):
  count = 0
  for i in range(len(exploitDataFrame)):
    if(exploitDataFrame['platform'][i] == platform):
      count += 1
  return count

windowsCount = countPlatform('windows')
windowsx86Count = countPlatform('windows_x86')
linuxCount = countPlatform('linux')
osxCount = countPlatform('osx')
hardwareCount = countPlatform('hardware')
multipleCount = countPlatform('multiple')
solarisCount = countPlatform('solaris')
novellCount = countPlatform('novell')
androidCount = countPlatform('android')
phpCount = countPlatform('php')


print(windowsCount, windowsx86Count, linuxCount, hardwareCount, solarisCount, novellCount, multipleCount, osxCount, androidCount, phpCount)

totalCount = windowsCount + windowsx86Count + linuxCount + hardwareCount + solarisCount + novellCount + multipleCount + osxCount + androidCount + phpCount

if(totalCount == len(exploitDataFrame)):
  print('All platforms counted')
else:
  print('Others not counted')

print(len(exploitDataFrame) - totalCount)

othersCount = 4476 + solarisCount + novellCount + windowsx86Count + osxCount + androidCount

platformCount = np.array([windowsCount, phpCount, linuxCount, hardwareCount, multipleCount, othersCount])
platforms = ['windows', 'php', 'linux', 'hardware', 'mult. platforms', 'others']
explode = (.01, .01, .01, .01, .01, .01)
print(platformCount)

figure1 = plot.figure()
figure1.set_figwidth(10)
figure1.set_figheight(10)
plot.pie(platformCount, labels = platforms, explode=explode, autopct='%1.1f%%')
plot.title('Zero-day Exploits by Platform')

plot.show()

from matplotlib.ticker import PercentFormatter

exploitAnalysisDF = pd.DataFrame(columns = ['platform', 'frequency'])
exploitAnalysisDF['platform'] = platforms
exploitAnalysisDF['frequency'] = platformCount
exploitAnalysisDF.index = exploitAnalysisDF['platform']
#print(exploitAnalysisDF)

exploitAnalysisDF = exploitAnalysisDF.sort_values(by='frequency', ascending=False)

#cumlative percentage column is created w/ cumsum function
exploitAnalysisDF['cumlativePercentage'] = exploitAnalysisDF['frequency'].cumsum()/exploitAnalysisDF['frequency'].sum()*100

#make sure only 2 decimals points are shown
exploitAnalysisDF['cumlativePercentage'] = exploitAnalysisDF['cumlativePercentage'].apply(lambda x: round(x,2))

print(exploitAnalysisDF)


fig, ax = plot.subplots()

ax.bar(exploitAnalysisDF.index, exploitAnalysisDF['frequency'], color='B1')

#show labels diagonally
ax.set_xticklabels( exploitAnalysisDF['platform'], rotation = 45)

#ax2 and ax1 will be shown at same time with twinx func
ax2 = ax.twinx()

ax2.plot(exploitAnalysisDF.index, exploitAnalysisDF['cumlativePercentage'], color='C2', marker='D', ms=7)
ax2.yaxis.set_major_formatter(PercentFormatter())

fig.set_figwidth(10)
fig.set_figheight(10)

ax.tick_params(axis='y', colors='C3')
ax2.tick_params(axis='y', colors='C3')



for index, v in exploitAnalysisDF.iterrows():
    label = round(v['cumlativePercentage'],1)
    plot.annotate(label, xy=(v['platform'], v['cumlativePercentage']), color='C1')
plot.title('Zero-Day Platforms')
plot.show()